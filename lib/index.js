// Generated by CoffeeScript 2.5.1
(function() {
  var Command, OtrgenCommand, arg, decodeEntities, flags, fs, otrTimestamp, parseBlock, tsRE, ttml2sbv, ttmlRE;

  ({Command, flags} = require('@oclif/command'));

  fs = require('fs').promises;

  tsRE = /(?<h>\d):(?<m>\d\d):(?<s>\d\d)\.(?<ms>\d\d\d)/;

  ttmlRE = /^<p begin="(?<ts1>[\d:.]*)" end="(?<ts2>[\d:.]*)" style="s2">(?<text>.*?)<\/p>$/;

  decodeEntities = function(encodedString) {
    return encodedString.replace(/&#(\d+);/gi, function(match, numStr) {
      return String.fromCharCode(parseInt(numStr, 10));
    });
  };

  otrTimestamp = function(timestamp) {
    var groups, h, html, m, matches, ms, s, seconds;
    matches = timestamp.match(tsRE);
    groups = matches.groups;
    // Convert timestamp to seconds
    h = parseInt(groups.h, 10);
    m = parseInt(groups.m, 10);
    s = parseInt(groups.s, 10);
    ms = parseInt(groups.ms, 10);
    seconds = h * 3600 + m * 60 + s + ms / 1000;
    return html = `<span class="timestamp" data-timestamp="${seconds}">${groups.m}:${groups.s}</span>`;
  };

  ttml2sbv = function(lines) {
    var groups, i, len, line, matches, results;
    results = [];
    for (i = 0, len = lines.length; i < len; i++) {
      line = lines[i];
      matches = line.match(ttmlRE);
      if (matches) {
        groups = matches.groups;
        results.push(`${groups.ts1}, ${groups.ts2}`);
        results.push(`${decodeEntities(groups.text)}`);
        results.push("");
      }
    }
    return results;
  };

  parseBlock = function(lines) {
    var endTs, html, otrStartTs, startTs, text, timestamps;
    timestamps = lines.shift();
    text = lines.shift();
    lines.shift();
    if (!timestamps || !text) {
      return;
    }
    [startTs, endTs] = timestamps.split(',');
    otrStartTs = otrTimestamp(startTs);
    return html = `${otrStartTs} ${text} <br />`;
  };

  OtrgenCommand = class OtrgenCommand extends Command {
    async run() {
      var args, html, lines, otr, otrString, results, text;
      ({args} = this.parse(OtrgenCommand));
      // Show usage if no input file given.
      if (args.inputFile === '') {
        this._help();
        this.exit(0);
      }
      text = (await fs.readFile(args.inputFile, 'utf8'));
      lines = text.split(/\r?\n/);
      // Check for and convert TTML format to SBV
      if (lines[1].match(/tt xml/)) {
        lines = ttml2sbv(lines);
      }
      results = [];
      while (lines.length) {
        results.push(parseBlock(lines));
      }
      html = results.join('\n');
      otr = {
        text: html
      };
      otrString = JSON.stringify(otr, 4);
      return this.log(otrString);
    }

  };

  OtrgenCommand.args = [
    arg = {
      name: 'inputFile',
      required: false,
      default: ''
    }
  ];

  OtrgenCommand.description = `Generate oTranscribe OTR files from TTML/SBV.
Converts TTML/SBV files to OTR format ready for import into oTranscribe.
Get YouTube TTML files with \`youtube-dl --write-auto-sub --sub-format ttml [YOUTUBE URL]\`.`;

  OtrgenCommand.flags = {
    // add --version flag to show CLI version
    version: flags.version({
      char: 'v'
    }),
    // add --help flag to show CLI version
    help: flags.help({
      char: 'h'
    })
  };

  module.exports = OtrgenCommand;

}).call(this);
